"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[200],{74173:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=t(74848),i=t(28453);const s={sidebar_position:1},o="Postgres (Heroku)",c={id:"reference/Connectors/capture-connectors/postgres-heroku",title:"Postgres (Heroku)",description:"This connector captures data from Postgres into Flow collections.  It is specifically for DBs that don't support write ahead logs.",source:"@site/docs/reference/Connectors/capture-connectors/postgres-heroku.md",sourceDirName:"reference/Connectors/capture-connectors",slug:"/reference/Connectors/capture-connectors/postgres-heroku",permalink:"/pr-preview/pr-1387/reference/Connectors/capture-connectors/postgres-heroku",draft:!1,unlisted:!1,editUrl:"https://github.com/estuary/flow/edit/master/site/docs/reference/Connectors/capture-connectors/postgres-heroku.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Pinterest",permalink:"/pr-preview/pr-1387/reference/Connectors/capture-connectors/pinterest"},next:{title:"WooCommerce",permalink:"/pr-preview/pr-1387/reference/Connectors/capture-connectors/woocommerce"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Set up the Postgres Connector in Estuary Flow",id:"set-up-the-postgres-connector-in-estuary-flow",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Properties",id:"properties",level:3},{value:"Endpoint",id:"endpoint",level:4},{value:"Bindings",id:"bindings",level:4},{value:"Sample",id:"sample",level:3},{value:"Supported Cursors",id:"supported-cursors",level:2},{value:"Limitations",id:"limitations",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"postgres-heroku",children:"Postgres (Heroku)"}),"\n",(0,r.jsx)(n.p,{children:"This connector captures data from Postgres into Flow collections.  It is specifically for DBs that don't support write ahead logs."}),"\n",(0,r.jsxs)(n.p,{children:["It is available for use in the Flow web application. For local development or open-source workflows, ghcr.io/estuary/source-postgres",":dev"," provides the latest version of the connector as a Docker image. You can also follow the link in your browser to see past image versions."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before setting up the Postgres source connector, make sure you have the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Postgres Version: Use Postgres v9.3.x or above for non-CDC workflows and Postgres v10 or above for CDC workflows."}),"\n",(0,r.jsx)(n.li,{children:"SSL Enabled: Ensure SSL is enabled in your environment."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"Follow the steps below to set up the Postgres connector:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Log into the Heroku UI and extract your Username and Password."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"set-up-the-postgres-connector-in-estuary-flow",children:"Set up the Postgres Connector in Estuary Flow"}),"\n",(0,r.jsx)(n.p,{children:"To configure the Postgres source connector:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Log into your Estuary Flow account."}),"\n",(0,r.jsx)(n.li,{children:"Navigate to Captures."}),"\n",(0,r.jsx)(n.li,{children:'Choose "Postgres (Heroku)" from the connector search.'}),"\n",(0,r.jsx)(n.li,{children:"Enter the Host, Port, DB Name and password for your Postgres database from step 1 above."}),"\n",(0,r.jsx)(n.li,{children:"List the Schemas you want to sync if applicable."}),"\n",(0,r.jsx)(n.li,{children:'Select "require" from the SSL Mode options (Heroku mandates it).'}),"\n",(0,r.jsx)(n.li,{children:"On the next page, select a cursor field for each collection.  Note that your cursor field currently has to be either a timestamp or string."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["You configure connectors either in the Flow web app, or by directly editing the catalog specification file. See ",(0,r.jsx)(n.a,{href:"https://docs.estuary.dev/concepts/connectors/#using-connectors",children:"connectors"})," to learn more about using connectors. The values and specification sample below provide configuration details specific to the Postgres (Heroku) source connector."]}),"\n",(0,r.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h4,{id:"endpoint",children:"Endpoint"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Title"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required/Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/host"})}),(0,r.jsx)(n.td,{children:"Host"}),(0,r.jsx)(n.td,{children:"Hostname of the database."}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Required"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/port"})}),(0,r.jsx)(n.td,{children:"Port"}),(0,r.jsx)(n.td,{children:"Port of the database"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Default"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/database_name"})}),(0,r.jsx)(n.td,{children:"Database Name"}),(0,r.jsx)(n.td,{children:"Name of the database"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Required"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"bindings",children:"Bindings"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Title"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Required/Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"/stream"})})}),(0,r.jsx)(n.td,{children:"Stream"}),(0,r.jsx)(n.td,{children:"Resource of your Postgres Tables from which collections are captured."}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Required"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"/syncMode"})})}),(0,r.jsx)(n.td,{children:"Sync Mode"}),(0,r.jsx)(n.td,{children:"Connection method."}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Required"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"sample",children:"Sample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "properties": {\n    "replication_method": {\n      "oneOf": null,\n      "type": "object",\n      "properties": {\n        "method": {\n          "type": "string",\n          "default": "Standard",\n          "const": "Standard"\n        }\n      },\n      "default": {\n        "method": "Standard"\n      }\n    },\n    "jdbc_url_params": {\n      "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as \'key=value\' pairs separated by the symbol \'&\'. (Eg. key1=value1&key2=value2&key3=value3). For more information see https://jdbc.postgresql.org/documentation/head/connect.html"\n    },\n    "ssl_mode": {\n      "description": "SSL connection modes. Read more at https://jdbc.postgresql.org/documentation/head/ssl-client.html",\n      "oneOf": [\n        {\n          "additionalProperties": true,\n          "description": "Disables encryption of communication between Flow and source database.",\n          "properties": {\n            "mode": {\n              "const": "disable",\n              "order": 0,\n              "type": "string"\n            }\n          },\n          "required": [\n            "mode"\n          ],\n          "title": "disable"\n        },\n        {\n          "additionalProperties": true,\n          "description": "Enables encryption only when required by the source database.",\n          "properties": {\n            "mode": {\n              "const": "allow",\n              "order": 0,\n              "type": "string"\n            }\n          },\n          "required": [\n            "mode"\n          ],\n          "title": "allow"\n        },\n        {\n          "additionalProperties": true,\n          "description": "Allows unencrypted connection only if the source database does not support encryption.",\n          "properties": {\n            "mode": {\n              "const": "prefer",\n              "order": 0,\n              "type": "string"\n            }\n          },\n          "required": [\n            "mode"\n          ],\n          "title": "prefer"\n        },\n        {\n          "additionalProperties": true,\n          "description": "Always require encryption. If the source database server does not support encryption, connection will fail.",\n          "properties": {\n            "mode": {\n              "const": "require",\n              "order": 0,\n              "type": "string"\n            }\n          },\n          "required": [\n            "mode"\n          ],\n          "title": "require"\n        },\n        {\n          "additionalProperties": true,\n          "description": "Always require encryption and verifies that the source database server has a valid SSL certificate.",\n          "properties": {\n            "ca_certificate": {\n              "airbyte_secret": true,\n              "description": "CA certificate",\n              "multiline": true,\n              "order": 1,\n              "title": "CA Certificate",\n              "type": "string"\n            },\n            "client_certificate": {\n              "airbyte_secret": true,\n              "always_show": true,\n              "description": "Client certificate",\n              "multiline": true,\n              "order": 2,\n              "title": "Client Certificate",\n              "type": "string"\n            },\n            "client_key": {\n              "airbyte_secret": true,\n              "always_show": true,\n              "description": "Client key",\n              "multiline": true,\n              "order": 3,\n              "title": "Client Key",\n              "type": "string"\n            },\n            "client_key_password": {\n              "airbyte_secret": true,\n              "description": "Password for keystorage. If you do not add it - the password will be generated automatically.",\n              "order": 4,\n              "title": "Client key password",\n              "type": "string"\n            },\n            "mode": {\n              "const": "verify-ca",\n              "order": 0,\n              "type": "string"\n            }\n          },\n          "required": [\n            "mode",\n            "ca_certificate"\n          ],\n          "title": "verify-ca"\n        },\n        {\n          "additionalProperties": true,\n          "description": "This is the most secure mode. Always require encryption and verifies the identity of the source database server.",\n          "properties": {\n            "ca_certificate": {\n              "airbyte_secret": true,\n              "description": "CA certificate",\n              "multiline": true,\n              "order": 1,\n              "title": "CA Certificate",\n              "type": "string"\n            },\n            "client_certificate": {\n              "airbyte_secret": true,\n              "always_show": true,\n              "description": "Client certificate",\n              "multiline": true,\n              "order": 2,\n              "title": "Client Certificate",\n              "type": "string"\n            },\n            "client_key": {\n              "airbyte_secret": true,\n              "always_show": true,\n              "description": "Client key",\n              "multiline": true,\n              "order": 3,\n              "title": "Client Key",\n              "type": "string"\n            },\n            "client_key_password": {\n              "airbyte_secret": true,\n              "description": "Password for keystorage. If you do not add it - the password will be generated automatically.",\n              "order": 4,\n              "title": "Client key password",\n              "type": "string"\n            },\n            "mode": {\n              "const": "verify-full",\n              "order": 0,\n              "type": "string"\n            }\n          },\n          "required": [\n            "mode",\n            "ca_certificate"\n          ],\n          "title": "verify-full"\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"supported-cursors",children:"Supported Cursors"}),"\n",(0,r.jsx)(n.p,{children:"The supported cursors for incremental sync are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TIMESTAMP"}),"\n",(0,r.jsx)(n.li,{children:"TIMESTAMP_WITH_TIMEZONE"}),"\n",(0,r.jsx)(n.li,{children:"TIME"}),"\n",(0,r.jsx)(n.li,{children:"TIME_WITH_TIMEZONE"}),"\n",(0,r.jsx)(n.li,{children:"DATE"}),"\n",(0,r.jsx)(n.li,{children:"BIT"}),"\n",(0,r.jsx)(n.li,{children:"BOOLEAN"}),"\n",(0,r.jsx)(n.li,{children:"TINYINT/SMALLINT"}),"\n",(0,r.jsx)(n.li,{children:"INTEGER"}),"\n",(0,r.jsx)(n.li,{children:"BIGINT"}),"\n",(0,r.jsx)(n.li,{children:"FLOAT/DOUBLE"}),"\n",(0,r.jsx)(n.li,{children:"REAL"}),"\n",(0,r.jsx)(n.li,{children:"NUMERIC/DECIMAL"}),"\n",(0,r.jsx)(n.li,{children:"CHAR/NCHAR/NVARCHAR/VARCHAR/LONGVARCHAR"}),"\n",(0,r.jsx)(n.li,{children:"BINARY/BLOB"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsx)(n.p,{children:"The Postgres source connector has the following limitations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Schema Size: Schemas larger than 4MB are not supported."}),"\n",(0,r.jsx)(n.li,{children:"Schema Alteration: The connector does not alter the schema present in your database. The destination may alter the schema, depending on its configuration."}),"\n",(0,r.jsx)(n.li,{children:"Schema Evolution: Adding/removing tables without resetting the entire connection is supported. Resetting a single table within the connection without resetting the rest of the destination tables is also supported. Changing a column data type or removing a column might break connections."}),"\n",(0,r.jsx)(n.li,{children:"Xmin Replication Mode: Xmin replication is supported for cursor-less replication."}),"\n",(0,r.jsx)(n.li,{children:"Temporary File Size Limit: Larger tables may encounter temporary file size limit errors. You may need to increase the temp_file_limit."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);